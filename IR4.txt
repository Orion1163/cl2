import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.preprocessing import LabelEncoder
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score


df = pd.read_csv("email_spam.csv")

df.drop_duplicates(inplace=True)
print("Duplicates removed.")

le = LabelEncoder()
df['spam'] = le.fit_transform(df['type'])

df['text'] = df['text'].replace("\n", "", regex=True)

x_train, x_test, y_train, y_test = train_test_split(df['text'], df['spam'], test_size=0.1, random_state=42)


vectorizer = CountVectorizer()
x_train_count = vectorizer.fit_transform(x_train.values)
x_test_count = vectorizer.transform(x_test.values)


knn_model = KNeighborsClassifier(n_neighbors=3)
knn_model.fit(x_train_count, y_train)

accuracy = knn_model.score(x_test_count, y_test)
print(f"Model accuracy: {accuracy }")

email = ['50% discount on data science courses signup now']
new_email_count = vectorizer.transform(email)
prediction = knn_model.predict(new_email_count)

if prediction[0] == 1:
    print("The email is Spam.")
else:
    print("The email is Not Spam.")



This code demonstrates a **K-Nearest Neighbors (KNN)** classifier for detecting spam emails. Here’s an explanation of each part:

### 1. **Loading and Preparing Data**
   - The data is read from a CSV file `email_spam.csv`, which contains email text and a label (`type`) indicating whether each email is spam or not.
   - `df.drop_duplicates(inplace=True)`: Removes any duplicate rows to ensure data quality.

### 2. **Label Encoding**
   - `LabelEncoder` is used to convert the `type` column into a numerical format. If `type` is "spam", it’s converted to 1; if "ham" (not spam), it’s converted to 0.
   - This new encoded column is stored as `spam`, making it easier to work with numerical classifiers.

### 3. **Text Preprocessing and Splitting Data**
   - The `text` column is cleaned by removing newline characters (`\n`) to standardize the format.
   - The data is split into training and testing sets with an 90-10 split using `train_test_split`. The `text` column is used as the features (`x`), and the `spam` column as the labels (`y`).

### 4. **Vectorizing the Text Data**
   - `CountVectorizer` converts text data into a format that machine learning models can process.
   - `x_train_count` and `x_test_count` store the vectorized representations of the training and test email texts, respectively.

### 5. **K-Nearest Neighbors (KNN) Model**
   - `KNeighborsClassifier(n_neighbors=3)`: A KNN model is instantiated with `k=3`, meaning it will look at the three nearest neighbors to classify an email.
   - `knn_model.fit(x_train_count, y_train)`: The model is trained on the vectorized training data.

### 6. **Model Evaluation**
   - The model’s accuracy is calculated on the test data using `knn_model.score(x_test_count, y_test)`, providing an indication of its performance.

### 7. **Spam Detection on New Email**
   - A sample email, `"50% discount on data science courses signup now"`, is vectorized and classified.
   - `prediction = knn_model.predict(new_email_count)`: The model predicts whether the email is spam (1) or not (0), based on the trained KNN classifier.
   
### Output
The model outputs its accuracy, and the final print statement indicates whether the sample email is classified as "Spam" or "Not Spam." This basic spam filter shows how text classification can be used to identify spam content.
